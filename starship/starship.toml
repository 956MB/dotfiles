format = """
$username\
$hostname\
$battery\
$directory\
$vcsh\
$git_branch\
$git_commit\
$git_state\
$custom\
$bun\
$cmake\
$golang\
$lua\
$python\
$rust\
$swift\
$zig\
$hg_branch\
$cmd_duration\
$status\
$jobs\
$line_break\
$character"""

## FIRST LINE/ROW: Info & Status
# First param ─┌
[username]
format = " (blue)[$user]($style)"
style_user = "bold blue"
style_root = "bold red"
show_always = true

# Second param
[hostname]
format = '@[$hostname]($style)'
style = "bold blue"
ssh_only = true
disabled = false
aliases = { "AlexandacStudio" = "macstudio", "AlexandacStudio.attlocal.net" = "macstudio", "Alexanders-Mac-Studio" = "macstudio", "Mac.attlocal.net" = "macstudio", "Mac" = "macstudio" }

# Battery after host
[battery]
full_symbol = " "
charging_symbol = " "
discharging_symbol = " "
disabled = false

[[battery.display]]  # "bold red" style when capacity is between 0% and 20%
threshold = 20
style = "bold red"

[[battery.display]]  # "bold yellow" style when capacity is between 20% and 50%
threshold = 50
style = "bold yellow"

[[battery.display]]  # "bold green" style when capacity is between 50% and 100%
threshold = 100
style = "bold green"

# Current time
[time]
# format = "at [$time]($style) "
time_format = "%T"
style = "bold bright-cyan"
disabled = false

# Location
[directory]
format = " in [$path]($style)[$read_only]($read_only_style) "
style = "purple"
truncation_length = 0
truncate_to_repo = true
truncation_symbol = "repo: "

[git_metrics]
disabled = true

# [git_metrics]
# disabled = false
# format = '([$deleted]($style_deleted)[$renamed]($style_renamed)[$modified]($style_modified))'
# style_deleted = 'bold red'
# style_modified = 'bold blue'  # or 'bold yellow' if you prefer orange
# style_renamed = 'bold green'

[custom.git_changes]
command = '''
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    # Get unstaged changes (working dir vs index)
    unstaged=$(git diff --shortstat 2>/dev/null)
    # Get staged changes (index vs HEAD)
    staged=$(git diff --cached --shortstat 2>/dev/null)
    # Get untracked files count
    untracked=$(git ls-files --others --exclude-standard 2>/dev/null | wc -l | tr -d " ")
    # Get staged files count
    staged_files=$(git diff --cached --name-only 2>/dev/null | wc -l | tr -d " ")
    
    # Process all stats
    echo -e "$unstaged\n$staged" | awk -v untracked="$untracked" -v staged_files="$staged_files" '
    BEGIN { modified=0; added=0; deleted=0; }
    {
        for(i=1;i<=NF;i++) {
            if($(i+1)=="file" || $(i+1)=="files") modified+=$(i);
            else if($(i+1)=="insertion(+)" || $(i+1)=="insertions(+)") added+=$(i);
            else if($(i+1)=="deletion(-)" || $(i+1)=="deletions(-)") deleted+=$(i);
        }
    }
    END {
        # Calculate totals
        total_new = untracked + staged_files;
        
        out="";
        if(deleted>0) out=out sprintf("\033[1;31m-%s\033[0m", deleted);
        if(modified>0) out=out sprintf("\033[1;34m~%s\033[0m", modified);
        if(total_new>0) out=out sprintf("\033[1;32m+%s\033[0m", total_new);
        if(added>0) out=out sprintf("\033[1;33m↑%s\033[0m", added);
        if(out!="") print "[" out "]";
    }'
fi
'''
when = "true"
shell = ["bash", "--noprofile", "--norc"]
format = "$output "

# Before all the version info (python, nodejs, php, etc.)
[git_status]
style = "white"
ahead = "⇡${count}"
diverged = "⇕⇡${ahead_count}⇣${behind_count}"
behind = "⇣${count}"
deleted = "x"

# Last param in the first line/row
[cmd_duration]
min_time = 1
format = "[$duration]($style) "
disabled = false

# SYMBOLS
[status]
format = 'returned [$status $common_meaning(SIG$signal_name)]($style) '
style = "bold red"
map_symbol = true
disabled = false

# Background running jobs
[jobs]
format = "with [($number )more jobs]($style) "
threshold = 1
disabled = false


## SECOND LINE/ROW: Prompt
# Prompt: param 1 └─
[character]
success_symbol = " (blue)[λ](bold blue)"
error_symbol = " (blue)[Σ](bold red)"

[bun]
symbol = "Bun "
style = "#F471B5"

[cmake]
symbol = "謁 "

[git_branch]
symbol = " "

[golang]
symbol = "󰟓 "
style = "blue"

[lua]
symbol = " "
style = "blue"

[python]
symbol = " "
style = "bold blue"

[rust]
symbol = " "

[swift]
symbol = " "

[zig]
symbol = " "
style = "bold yellow"
