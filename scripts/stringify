#!/bin/bash

display_usage() {
    echo "This script stringifies the contents of a directory, including all files and their line numbers."
    echo ""
    echo "Usage: stringify <repo-root-directory> [-e <extension1>,<extension2>,...] [-i <extension1>,<extension2>,...] -n <custom_output_name>"
    echo ""
    echo "Example: stringify gpui -i rs,toml -n gpui_rs"
    echo ""
    echo "Options:"
    echo "  <repo-root-directory>   Directory to stringify (default: current directory)"
    echo "  -e, --exclude           File extensions to exclude (comma-separated, e.g., -e .git,.log)"
    echo "  -i, --include           File extensions to include (comma-separated, e.g., -i .txt,.md)"
    echo "  -n, --name              Custom name for the output file (default: <directory>_stringified.txt)"
    echo "  -h, --help              Display this help message"
}

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    display_usage
    exit 0
fi

REPO_DIR="."

append_patterns() {
    IFS=',' read -ra exts <<<"$1"
    for ext in "${exts[@]}"; do
        echo "-not -name \"*.$ext\""
    done
}

include_patterns() {
    local patterns=()
    IFS=',' read -ra exts <<<"$1"
    for ((i = 0; i < ${#exts[@]}; i++)); do
        if [[ $i -eq 0 ]]; then
            patterns+=("-name \"*.${exts[i]}\"")
        else
            patterns+=("-o -name \"*.${exts[i]}\"")
        fi
    done
    echo "${patterns[@]}"
}

FIND_CMD="find"

while [[ "$#" -gt 0 ]]; do
    case $1 in
    -e | --exclude)
        shift
        EXCLUDE_PATTERNS=$(append_patterns "$1")
        shift
        ;;
    -i | --include)
        shift
        INCLUDE_PATTERNS=$(include_patterns "$1")
        shift
        ;;
    -n | --name)
        shift
        CUSTOM_OUTPUT_NAME="$1"
        shift
        ;;
    *)
        REPO_DIR="$1"
        shift
        ;;
    esac
done

TOTAL_FILES=0
TOTAL_LINES=0

echo "Stringifying repository: $REPO_DIR"

REPO_NAME=$(basename "$REPO_DIR")

if [[ -n $CUSTOM_OUTPUT_NAME ]]; then
    OUTPUT_FILE="${CUSTOM_OUTPUT_NAME}.txt"
else
    OUTPUT_FILE="${REPO_NAME}_stringified.txt"
fi

if [ ! -d "$REPO_DIR" ]; then
    echo "Directory does not exist: $REPO_DIR"
    exit 1
fi

>"$OUTPUT_FILE"

if [[ -n $INCLUDE_PATTERNS ]]; then
    FIND_CMD="$FIND_CMD \"$REPO_DIR\" -type f \\( ${INCLUDE_PATTERNS[*]} \\)"
elif [[ -n $EXCLUDE_PATTERNS ]]; then
    FIND_CMD="$FIND_CMD \"$REPO_DIR\" -type f $EXCLUDE_PATTERNS"
else
    FIND_CMD="$FIND_CMD \"$REPO_DIR\" -type f"
fi

echo "Find command: $FIND_CMD"

if [[ -n $INCLUDE_PATTERNS ]]; then
    included_extensions=$(echo "$INCLUDE_PATTERNS" | sed 's/.*\*\.\(.*\)".*/\1/g' | tr '\n' ', ' | sed 's/, $//')
    echo "Included file types: $included_extensions"
fi

if [[ -n $EXCLUDE_PATTERNS ]]; then
    excluded_extensions=$(echo "$EXCLUDE_PATTERNS" | sed 's/.*\*\.\(.*\)".*/\1/g' | tr '\n' ', ' | sed 's/, $//')
    echo "Excluded file types: $excluded_extensions"
fi

while IFS= read -r file; do
    echo "FILE: ${file#$REPO_DIR/}" >>"$OUTPUT_FILE"
    file_lines=$(awk 'END{print NR}' "$file")
    awk '{printf "%6d  %s\n", NR, $0}' "$file" >>"$OUTPUT_FILE"
    echo "" >>"$OUTPUT_FILE"
    ((TOTAL_FILES++))
    ((TOTAL_LINES += file_lines))
done < <(eval $FIND_CMD)

echo "Total files: $TOTAL_FILES"
echo "Total lines: $TOTAL_LINES"
echo "Output file: $OUTPUT_FILE"
